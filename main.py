# x·ª≠ l√Ω truy v·∫•n AI + webhook Facebook
# https://developers.facebook.com/apps/1786295022763777/add/ Link webhook n·∫øu kh√¥ng c√≥ c√†i ngo√†i
import requests
import os
import uvicorn
import socket
from fastapi import FastAPI, Request, Depends
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse, PlainTextResponse
from db import engine, SessionLocal, get_db
from sqlalchemy import text
from facebook_tools import reply_comment, get_page_info, get_latest_posts
from agent import get_answer

app = FastAPI()

# CORS cho ph√©p frontend g·ªçi API
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Cho ph√©p m·ªçi domain g·ªçi API
    allow_methods=["*"],
    allow_headers=["*"],
)

# ========== C√°c h√†m ki·ªÉm tra k·∫øt n·ªëi ==========
def test_mysql_connection(db=None):
    """Ki·ªÉm tra k·∫øt n·ªëi t·ªõi MySQL/MariaDB b·∫±ng SQLAlchemy."""
    if db:
        try:
            db.execute(text("SELECT 1"))
            return {"db_connection": "success"}
        except Exception as e:
            return {"db_connection": "failed", "error": str(e)}
    else:
        try:
            with engine.connect() as conn:
                conn.execute(text("SELECT 1"))
            return {"db_connection": "success"}
        except Exception as e:
            return {"db_connection": "failed", "error": str(e)}

def test_facebook_connection():
    """Ki·ªÉm tra k·∫øt n·ªëi t·ªõi Facebook Page b·∫±ng c√°ch g·ªçi h√†m get_page_info."""
    try:
        page_info = get_page_info()
        # Gi·∫£ s·ª≠ h√†m get_page_info s·∫Ω tr·∫£ v·ªÅ m·ªôt dictionary n·∫øu th√†nh c√¥ng
        if "id" in page_info and "name" in page_info:
            return {
                "facebook_connection": "success",
                "page_id": page_info.get("id"),
                "page_name": page_info.get("name")
            }
        else:
            return {
                "facebook_connection": "failed",
                "message": "Kh√¥ng th·ªÉ l·∫•y th√¥ng tin Page. Ki·ªÉm tra Access Token v√† quy·ªÅn."
            }
    except Exception as e:
        return {
            "facebook_connection": "failed",
            "error": str(e),
            "message": "L·ªói khi g·ªçi API Facebook."
        }
# ---
# ========== API do b·∫°n ƒë√£ vi·∫øt ==========
@app.get("/api/page_info")
def page_info_endpoint():
    return get_page_info()

@app.get("/api/page_posts")
def page_posts_endpoint():
    return get_latest_posts()

# ---
# ========== Webhook Facebook v√† API g·ªëc ==========
VERIFY_TOKEN = "dong1411"

@app.get("/")
async def root(db: SessionLocal = Depends(get_db)):
    """API g·ªëc, tr·∫£ v·ªÅ tr·∫°ng th√°i k·∫øt n·ªëi c·ªßa DB v√† Facebook Page."""
    db_status = test_mysql_connection(db)
    fb_status = test_facebook_connection()
    return {
        "message": "App is running",
        **db_status,
        **fb_status
    }

@app.get("/webhook")
async def verify_webhook(request: Request):
    params = dict(request.query_params)
    if params.get("hub.mode") == "subscribe" and params.get("hub.verify_token") == VERIFY_TOKEN:
        return PlainTextResponse(params["hub.challenge"], status_code=200)
    return PlainTextResponse("Invalid token", status_code=403)

@app.post("/webhook")
async def webhook(request: Request):
    data = await request.json()
    print("üì© Webhook data:", data)

    if "entry" in data:
        for entry in data["entry"]:
            for change in entry.get("changes", []):
                if change["field"] == "feed":
                    comment = change["value"].get("message", "")
                    comment_id = change["value"].get("comment_id", "")
                    user_id = change["value"]["from"]["id"]
                    user_name = change["value"]["from"]["name"]

                    payload = {"user": "nguyenvanA", "pass": "123456"}
                    res = requests.post("https://foreignervietnam.com/langchain/connect.php", json=payload)
                    print("üì© Response t·ª´ connect.php:", res.status_code, res.text)

                    answer = get_answer(comment)
                    reply_comment(comment_id, answer)

    return {"status": "ok"}

# ---
# ========== Kh·ªüi ch·∫°y ·ª©ng d·ª•ng ==========
if __name__ == "__main__":
    port = int(os.getenv("PORT", 8000))
    uvicorn.run("main:app", host="0.0.0.0", port=port, reload=True)